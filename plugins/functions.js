const accs = require("../data/accs.json")
const clans = require("../data/clans.json")
const rights = require("../data/rights.json")
const config = require("../settings/config.js")
const vk = require("VK-Promise")(config.token)
const links = require("../data/filters_links.json")
const fs = require("fs")
function decode(text) { //–†–∞—Å—à–∏—Ñ—Ä–æ–≤—á–∏–∫ —Å–ª–æ–≤ (–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
	var abc = {
		"1101000010111001": "–π",
		"1101000110000110": "—Ü",
		"1101000110000011": "—É",
		"1101000010111010": "–∫",
		"1101000010111010": "–µ",
		"1101000010111101": "–Ω",
		"1101000010110011": "–≥",
		"1101000110001000": "—à",
		"1101000110001001": "—â",
		"1101000010110111": "–∑",
		"1101000110000101": "—Ö",
		"1101000110001010": "—ä",
		"1101000110000100": "—Ñ",
		"1101000110001011": "—ã",
		"1101000010110010": "–≤",
		"1101000010110000": "–∞",
		"1101000010111111": "–ø",
		"1101000110000000": "—Ä",
		"1101000010111110": "–æ",
		"1101000010111011": "–ª",
		"1101000010110100": "–¥",
		"1101000010110110": "–∂",
		"1101000110001101": "—ç",
		"1101000110001111": "—è",
		"1101000110000111": "—á",
		"1101000110000001": "—Å",
		"1101000010111100": "–º",
		"1101000010111000": "–∏",
		"1101000110000010": "—Ç",
		"1101000110001100": "—å",
		"1101000010110001": "–±",
		"1101000110001110": "—é",
		"1101000110010001": "—ë"
	}
	const replacer = function (f) { return abc[f] || f }
	const hz = text.toString().replace(/([^]+)/ig, replacer)
	return hz
}
function wait(ms) {
	var start = new Date().getTime()
	while ((new Date().getTime() - start) < ms) { }
	return 1
}
function gap(min, max) {
	var hui = []
	for (; min <= max; min++) {
		hui.push(min)
	}
	return hui
}
function nick(id, type) {
	if (accs.some(a => a.id == id) && type == 1) {
		return accs.filter(a => a.id == id).map(a => a.nickname) + ", "
	} else if (accs.some(a => a.id == id) && type == 2) {
		return accs.filter(a => a.id == id).map(a => a.nickname)
	} else {
		return ""
	}
}
function time(type) {
	const time = new Date()
	if (time.getSeconds().toString().length == 1) {
		var sec = "0" + time.getSeconds()
	} else {
		var sec = time.getSeconds()
	}
	if (time.getMinutes().toString().length == 1) {
		var min = "0" + time.getMinutes()
	} else {
		var min = time.getMinutes()
	}
	if (time.getDate().toString().length == 1) {
		var date = "0" + time.getDate()
	} else {
		var date = time.getDate()
	}
	if (time.getHours().toString().length == 1) {
		var hour = "0" + time.getHours()
	} else {
		var hour = time.getHours()
	}
	if (time.getMonth().toString().length == 1) {
		var mon = "0" + time.getMonth()
	} else {
		var mon = time.getMonth()
	}
	if (type == 1) {
		const wdays = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
		const mes = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–≤–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
		var gone = "üìÖ –î–∞—Ç–∞: " + date + " " + mes[time.getMonth()] + " " + time.getFullYear() + " –≥. (" + wdays[time.getDay()] + ")\n‚è∞ –í—Ä–µ–º—è: " + hour + ":" + min + ":" + sec
		return gone
	}
	if (type == 2) {
		return date + "." + mon + "." + time.getFullYear() + " " + hour + ":" + min + ":" + sec
	}
	if(type == 3){
		const mes = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–≤–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
		const wdays = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
		return {data:{date: date, mes: mes[time.getMonth()], year: time.getFullYear(), wdays: wdays[time.getDay()]}, time:{hour: hour, min: min, sec: sec}}
	}
}
function rand(text) {
	var tts = Math.floor(text.length * Math.random())
	return text[tts]
}
var funct = Array.prototype.random = function () {
	return this[Math.floor(this.length * Math.random())]
}
function search(re, str) {
	if (!str.some(a => a.chic == re)) {
		return false
	} else {
		return true
	}
}
function declOfNum(number, titles) {
	cases = [2, 0, 1, 1, 1, 2];
	return titles[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[(number % 10 < 5) ? number % 10 : 5]];
}
function getRights(uuid) {
	var i = accs.filter(a => a.id == uuid).map(a => a.uid)
	var r = accs[i].rights
	if (r == 0) {
		var ri = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
	} else if (r == 1) {
		var ri = "–í–∏–ø"
	} else if (r == 2) {
		var ri = "–ü—Ä–µ–º–∏—É–º"
	} else if (r == 3) {
		var ri = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
	} else if (r == 4) {
		var ri = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
	} else if (r == 5) {
		var ri = "–°–º–æ—Ç—Ä–∏—Ç–µ–ª—å"
	} else if (r == 6) {
		var ri = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
	} else if (r == 7) {
		var ri = "–°–∏—Å—Ç–µ–º–Ω—ã–π –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
	} else {
		var ri = "–°–æ–∑–¥–∞—Ç–µ–ª—å –ë–æ—Ç–∞"
	}
	return ri
}
function getRandomInt(min, max) {
	return Math.round(Math.random() * (max - min)) + min
}
function getClan(uuid) {
	var i = accs.filter(a => a.id == uuid).map(a => a.clan_uid)
	if (i != -1) {
		var cf = clans[i].name
	}
	if (i == -1) {
		var cf = "–ù–µ—Ç –∫–ª–∞–Ω–∞"
	}
	return cf
}
function filter(text) {
	var filter0 = text.search(/(http(s)?:\/\/.)?(www\.)?[-a-z0-9@:%._\+~#=]{1,256}\.[a-z]{2,6}/);
	var filter1 = text.search(/(http(s)?:\/\/)?(www\.)?[–∞-—è0-9-_.]{1,256}\.(—Ä—Ñ|—Å—Ä–±|–±–ª–æ–≥|–±–≥|—É–∫—Ä|—Ä—É—Å|“õ–∞–∑|ÿßŸÖÿßÿ±ÿßÿ™.|ŸÖÿµÿ±.|ÿßŸÑÿ≥ÿπŸàÿØŸäÿ©.)/);
	if (filter0 != -1 || filter1 != -1) {
		return false
	} else {
		return true
	}
}
function encode(text) {
	const right = text.toLowerCase()
	const abc = {
		"–π": "1101000010111001",
		"—Ü": "1101000110000110",
		"—É": "1101000110000011",
		"–∫": "1101000010111010",
		"–µ": "1101000010111010",
		"–Ω": "1101000010111101",
		"–≥": "1101000010110011",
		"—à": "1101000110001000",
		"—â": "1101000110001001",
		"–∑": "1101000010110111",
		"—Ö": "1101000110000101",
		"—ä": "1101000110001010",
		"—Ñ": "1101000110000100",
		"—ã": "1101000110001011",
		"–≤": "1101000010110010",
		"–∞": "1101000010110000",
		"–ø": "1101000010111111",
		"—Ä": "1101000110000000",
		"–æ": "1101000010111110",
		"–ª": "1101000010111011",
		"–¥": "1101000010110100",
		"–∂": "1101000010110110",
		"—ç": "1101000110001101",
		"—è": "1101000110001111",
		"—á": "1101000110000111",
		"—Å": "1101000110000001",
		"–º": "1101000010111100",
		"–∏": "1101000010111000",
		"—Ç": "1101000110000010",
		"—å": "1101000110001100",
		"–±": "1101000010110001",
		"—é": "1101000110001110",
		"—ë": "1101000110010001"
	}
	const replacer = function (f) { return abc[f] || f }
	const hz = right.replace(/[–ê-—è—ë–Å]/g, replacer)
	return hz
}
function replace(text) {
	const suf = "&#8419;"
	const replacer = function (a) { return a + suf || a}
	const a = text.toString().replace(/[0-9]/ig, replacer)
	return a
}
function dostup(num) {
	if (num == 1) return "c –í–∏–ø–∞"
	if (num == 2) return "c –ü—Ä–µ–º–∏—É–º–∞"
	if (num == 3) return "c –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
	if (num == 4) return "c –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
	if (num == 5) return "—Å –°–º–æ—Ç—Ä–∏—Ç–µ–ª—è"
	if (num == 6) return "–° –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"
	if (num == 7) return "—Ç–æ–ª—å–∫–æ –°–∏—Å—Ç–µ–º–Ω—É—é –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"
	if (num == 8) return "—Ç–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—é –ë–æ—Ç–∞"
}
function password(text) {
	charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
		retVal = "";
	for (var i = 0, n = charset.length; i < text; ++i) {
		retVal += charset.charAt(Math.floor(Math.random() * n));
	}
	return retVal;
}
function generation(a, b, c) {
	var array = []
	for (var i = 1; i <= c; i++) {
		array.push(getRandomInt(a, b))
	}
	return array
}
function check(text, nexus) {
	var filter0 = /(http(s)?:\/\/.)?(www\.)?[-a-z0-9@:%._\+~#=]{1,256}\.[a-z]{2,6}/
	var filter1 = /(?!http(s)?:\/\/)?(www\.)?[–∞-—è0-9-_.]{1,256}\.(—Ä—Ñ|—Å—Ä–±|–±–ª–æ–≥|–±–≥|—É–∫—Ä|—Ä—É—Å|“õ–∞–∑|ÿßŸÖÿßÿ±ÿßÿ™.|ŸÖÿµÿ±.|ÿßŸÑÿ≥ÿπŸàÿØŸäÿ©.)/
	var lol = filter0.test(text)
	var lol1 = filter1.test(text)
	if(filter0.test(text) == true || filter1.test(text) == true){
		var check = true
	}else{
		var check = false
	}
	if(!check) return nexus(false)
	if (check == true) {
		if(lol){
          var lolik = text.match(filter0)[0]
		}else{
		  var lolik = text.match(filter1)[0]
		}
		console.log(JSON.stringify(lolik))
		vk("utils.checkLink", {url: lolik}).then((res) => {
			const pizda = res.status == "banned" ? true : false
			nexus(pizda)
		})
	}
}
module.exports = {
	decode,
	wait,
	time,
	rand,
	search,
	getRights,
	getRandomInt,
	getClan,
	filter,
	encode,
	replace,
	declOfNum,
	gap,
	nick,
	dostup,
	password,
	generation,
	check
}